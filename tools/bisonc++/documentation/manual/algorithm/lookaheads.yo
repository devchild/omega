In the previous section it was stated that although state 5 has two possible
actions, in fact only one is used. This is a direct consequence of the
tt(%left '+') specification, as will be discussed in this section.

When analyzing a grammar all states that can be reached from the augmented
start rule are determined. In state 5 b() is confronted with a choice: either
a shift on tt('+') or a reduction according to the item `tt(expr -> expr '+'
expr .)'. What choice will b() make?

At this point the fact that b() implements a parser for a 
em(Look Ahead Left to Right (1)) (LALR(1)) grammar becomes relevant. B() will
use em(computed lookahead sets) to determine which alternative to select, when
confronted with a choice. The lookahead set can be used to favor one
transition over the other when eventually generating the tables for the
parsing function. 

Sometimes the lookahead sets allow b() simply to remove one action from
the set of possible actions. When b() is called to process the example grammar
while specifying the tt(--construction) option state 5 will em(only) show the
reduction and em(not) the shifting action: it has removed that alternative
from the action set. This is a direct consequence of a hidden shift-reduce 
conflict in the grammar: in state 5 the choice is between shifting or reducing
when encountering a tt('+') token. As we'll see in this section, tt('+') is in
the lookahead set of the reduce-item, and thus b() is faced with a conflict:
what to do on tt('+')? 

In this case the grammar designer has provided b() with a way out: the
tt(%left) directive tells b() to favor a reduction over a shift, and so it
removed tt(expr -> expr . '+' expr) from its set of actions in state 5.

In this section we'll have a look at the way b() determines lookahead (LA)
sets. 
    itemization(
    it() For each item in each state, b() determines the items whose LA sets
depend on that particular item.

To determine which items have LA set that depend on a particular item the
symbol following the item's dot position is inspected. If it's a nonterminal,
then all items whose LHSs are equal to that nonterminal depend on the item
being considered.

    Inspecting the states of our example grammar, using offsets (0-based) to
indicate their items, the following dependencies are observed:
        itemization(
        it() State 0: items 1 and 2 depend on items 0 and 1.
        it() State 1: items 2 and 3 depend on items 1 and 3.
        it() State 2: no dependencies
        it() State 3: no dependencies
        it() State 4: items 1 and 2 depend on items 0 and 2.
        it() State 5: no dependencies
        )

    it() Then, for each item it is determined what the next state will be if
that item is actually used in a transition. Items representing a reduction are
not considered here. This results in the following:
        itemization(
        it() State 0: items 0 and 1: transition to state 1
        it() State 1: items 1 and 3: transition to state 2; item 2: transition
                        to state 3
        it() State 2: item 1: transition to state 4
        it() State 3: no transitions
        it() State 4: items 1 and 2: transition to state 5; item 1: transition
                        to state 3
        it() State 5: item 1: transition to state 4
        )

    it() Next, LA propagation takes place: 
            itemization( 
            it() The LA set of the augmented start rule is initialized to
                tt($). All other LA sets are initiaized to an empty set.

            it() For each state all items are considered. Dependent items
                receive their LA sets from the items on which they depend
                (called their `parent item').

                The LA sets of the dependent items are equal to the tt(FIRST)
                set of the subrule of their parent items, starting at the
                symbol following their parent item's dot positions. 

            it() If a subrule's tt(FIRST) set contains tt(e), then that item's
                LA set is added to the subrule's LA set, removing the tt(e).

            it() If items depend on multiple parents, then the LA sets of
                those items are the union of the LA sets as determined for
                each of their parents.
            it() Once the LA sets of items in a state have been determined,
                then the LA sets of items transiting to other states are added
                to the LA sets of the corresponding kernel items in these
                other states (each item in an originating state only modifies
                one kernel item in a destination state).
            it() Since transitions may return to earlier states, determining
                LA sets is implemented as an iterative process, terminating
                when all LA sets have stabilized.
            )

        Applying the above algorithm to the example grammar we get:
        itemization(
        it() State 0:
            itemization(
            it() item 0: tt(start_$ ->  . start) LA: tt({$})nl()
                Add the LA set (tt({$})) to the items resulting from 
                the tt(start) productions nl()
                Next state from here: 1

            it() item 1: tt(start ->  . start expr) LA: tt({$})nl()
                Next state from here: 1

            it() item 2: tt(start ->  .) LA: tt({$})nl()

            it() From item 1: once again consider the tt(start) rules, adding
                fst(expr) tt(= {NR}) to the LA sets of those rules:
                itemization(
                it() item 1: tt(start ->  . start expr) LA: tt({$ NR})nl()
                it() item 2: tt(start ->  .) LA: tt({$ NR})nl()
                )
            )

        it() State 1:
            itemization(
            it() item 0: tt(start_$ -> start .) inherits LA: tt({$}) from item
                0, state 0. nl()

            it() item 1: tt(start -> start  . expr) inherits LA: tt({NR $})
                from item 1, state 0. nl()
                Add the LA set (tt({NR $})) to the items resulting from 
                the tt(expr) productions nl()
                Next state from here: 2

            it() item 2: tt(expr ->  . NR) LA: tt({NR $})nl()
                Next state from here: 3

            it() item 3: tt(expr ->  . expr '+' expr) LA: tt({NR $})nl()
                Next state from here: 2

            it() From item 2: once again consider the tt(expr) rules, adding
                fst('+') tt(= {'+'}) to the LA sets of those rules:
                itemization(
                it() item 2: tt(expr ->  . NR) LA: tt({+ NR $})nl()
                it() item 3: tt(expr ->  . expr '+' expr) LA: tt({+ NR $})nl()
                )
            )

        it() State 2:
            itemization(
            it() item 0: tt(start -> start expr  .) inherits LA: tt({NR $}) 
                from item 1, state 1. nl()
            it() item 1: tt(expr -> expr  . '+' expr) inherits LA: tt(+ NR $)
                from item 3, state 1.nl()
                Next state from here: 4
            )

        it() State 3:
            itemization(
            it() item 0: tt(expr -> NR  .) inherits LA: tt({+ NR $}) 
                from item 2, state 1.
            )

        it() State 4:
            itemization(
            it() item 0: tt(expr -> expr '+'  . expr) inherits LA: tt({+ NR
                $}) from item 2, state 2. nl()
                Add the LA set (tt({+ NR $})) to the items resulting from 
                the tt(expr) productions nl()
                Next state from here: 5
            it() item 1: tt(expr ->  . NR) LA: tt({+ NR $})nl()
                Next state from here: 3. Since item 0 in state 3 already has a
                LA set containing all elements of the current LA set, no
                further modifications need to be propagated.

            it() item 2: tt(expr ->  . expr '+' expr) LA: tt(+ NR $)nl()
                Next state from here: 5

            it() From item 2 all tt(expr) production rules need to be
                considered again. This time no LA sets change, so the LA sets
                of all items in this state have been determined.
            )

        it() State 5:
            itemization(
            it() item 0: tt(expr -> expr '+' expr  .) inherits LA: tt(+ NR $)
                from item 0, state 4
            it() item 1: tt(expr -> expr  . '+' expr) inherits LA: tt(+ NR $)
                from item 2, state 4. nl()
                Next state: 4. Since item 0 in state 4 already has a
                LA set containing all elements of the current LA set, no
                further modifications need to be propagated.
            )
        )
    )

    Once again, look at state 5. In this state, item 0 calls for a reduction
on tokens tt('+', NR) or tt(EOF). However, according to item 1 a em(shift)
must be performed when the next token is a tt('+'). This choice represents a
shift-reduce conflict which is reported by b() unless special actions are
taken. One of the actions is to tell b() what to do. A tt(%left) directive
tells b() to prefer a reduction over a shift when encountering a shift-reduce
conflict for the token(s) mentioned with the tt(%left) directive. Analogously,
a tt(%right) tells b() to perform a shift rather than a reduction. 

Since a tt(%left '+') was specified, b() drops the shift alternative, and a
listing of the grammar's construction process (using the option
tt(--construction)) shows for state 5:
        verb(
    State 5:
    0: [P4 3] expr -> expr '+' expr  .   { NR '+' <EOF> }  1, () -1
    1: [P4 1] expr -> expr  . '+' expr   { NR '+' <EOF> }  0, () 0
      0: 
      Reduce item(s): 0 
        )
    The shift action (implied by item 1) is not reported.
