Here is how to compile and run the parser file:
        verb(
    # List files (recursively) in the (current) examples/rpn  directory.
    % ls -R 
    .:
    build  parser  rpn.cc  rpn.h
    
    ./parser:
    grammar  lex.cc
    
    # Create `rpn' using the `build' script:
    % ./build rpn
    
    # List files again, ./rpn is the constructed program
    % ls -R
    .:
    build  parser  rpn  rpn.cc  rpn.h
    
    ./parser:
    Parser.h  Parser.ih  Parserbase.h  grammar  lex.cc  parse.cc  parse.output
        )
    Here is an example session using tt(rpn):
        verb(
    % rpn
    4 9 +
            13
    3 7 + 3 4 5 *+-
            -13
    3 7 + 3 4 5 * + - n              Note the unary minus, `n'
            13
    5 6 / 4 n +
            -3.16667
    3 4 ^                            Exponentiation
            81
    ^D                               End-of-file indicator
    %
        )

    