    The tt(%polymorphic) directive results in bic() generating a parser using
polymorphic semantic values. Each semantic value specification consists of a
em(tag), which is a bf(C++) identifier, and a bf(C++) type definition.

Tags and type definitions are separated from each other by a colon, and
multiple semantic values specifications are separated by semicolons. The
semicolon trailing the final semantic value specification is optional.

A grammar specification file may contain only one tt(%polymorphic) directive,
and the tt(%polymorphic, %stype) and tt(%union) directives are mutually
exclusive.

Here is an example, defining three semantic values types: an tt(int), a
tt(std::string) and a tt(std::vector<double>):
        verb(
    %polymorphic INT: int; STRING: std::string; 
                 VECT: std::vector<double>
        )
    The identifier to the left of the colon is called the em(type-identifier),
and the type definition to the right of the colon is called the
em(type-definition). Types specified at the tt(%polymorphic) type-definitions
must be built-in types or class-type declarations. Class types mentioned at
the tt(%polymorphic) directive must offer default constructors.

    If type declarations refer to types declared in header files that were
not already included by the parser's base class header, then these header
file(s) must be inserted using the tt(%baseclass-preinclude) directive as
these types are referred to in the generated tt(parserbase.h) header file.
