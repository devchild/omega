To Install bisonc++ by hand instead of using the binary distribution perform
the following steps:

    0. The previously used scripts below make/ are obsolete and were removed
        from this and future distributions. Icmake should be used instead, for
        which a top-level script (build) and support scripts in the ./icmake/
        directory are available. Icmake is available on a great many
        architectures. See the file INSTALL (and INSTALL.im, replacing the
        previously used INSTALL.cf) for further details.

    1. Skip this UNLESS you're intending to compile Bisonc++ under
            CYGWIN under Windows

        When compiling for CYGWIN, do as follows:

        a. Change the #define EXTENSION directive in INSTALL.im to:

            #define EXTENSION ".exe"

        b. The Bobcat library must be available under CYGWIN. As Bisonc++ does
            not use all classes of the Bobcat library. When compiling Bobcat
            only for Bisonc++, replace Bobcat's CLASSES file by the file
            CLASSES.bobcat also found in this directory, then follow the
            compilation instructions provided with Bobcat.

        c. Note that CYGWIN is not an official target environment for
            Bisonc++. When encountering problems I may or may not be able to
            provide assistance.


    2. Inspect the values of the variables in the file INSTALL.im Modify these
       when necessary. The default skeleton filenames are compiled into
       bisonc++ through the definitions in parser/dataskel.cc

    3. Make sure the bobcat library has been installed. 

       (If you compile the bobcat library yourself, note that bisonc++ does
        not use the classes Milter and Xpointer; they may --as far as bisonc++
        is concerned-- be left out of the library)

    4. Run 
            ./build program [strip]
        to compile bisonc++. Optionally provide `strip' to strip the
        executable (not with PROFILE, see INSTALL.im)

    5. Run (probably as root) 
            ./build install
       to install. Optionally add an additional argument as a base directory
       below which the software should be installed. 

    Following the installation nothing in this directory tree is required
    for the proper functioning of bisonc++, so consider removing it.

NOTE that parser-class header files generated by bisonc++ before version 1.00
     should modify the prototypes of some of their private members. Simply
     replacing the `support functions for parse()' section shown at the end of
     the header file by the following lines should make your header file
     up-to-date again. Note that bisonc++ does not by itself rewrite the
     parser class headers to prevent undoing any modifications you may have
     implemented in parser-class header files:

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup();
        void nextToken();
