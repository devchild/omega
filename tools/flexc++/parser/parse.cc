// Generated by Bisonc++ V4.05.00 on Fri, 07 Feb 2014 14:22:04 +0100

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them

// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <iomanip>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {309, 3}, // 1: input ->  opt_directives section_delimiter rules
     {311, 2}, // 2: section_delimiter (SECTION_DELIMITER) ->  SECTION_DELIMITER '\x0a'
     {313, 1}, // 3: identifier (IDENTIFIER) ->  IDENTIFIER
     {314, 0}, // 4: _sc_name ->  <empty>
     {315, 2}, // 5: _start_condition_type (INCL_START_CONDITION) ->  INCL_START_CONDITION _sc_name
     {315, 2}, // 6: _start_condition_type (EXCL_START_CONDITION) ->  EXCL_START_CONDITION _sc_name
     {316, 2}, // 7: _start_condition_names ->  _start_condition_names identifier
     {316, 1}, // 8: _start_condition_names ->  identifier
     {317, 2}, // 9: _start_condition_directive ->  _start_condition_type _start_condition_names
     {318, 1}, // 10: _name_def ->  identifier
     {319, 1}, // 11: _stringType (STRING) ->  STRING
     {319, 1}, // 12: _stringType (RAWSTRING) ->  RAWSTRING
     {320, 2}, // 13: _name_definition ->  _name_def _stringType
     {321, 1}, // 14: _directive ->  option
     {321, 1}, // 15: _directive ->  _start_condition_directive
     {321, 1}, // 16: _directive ->  _name_definition
     {321, 1}, // 17: _directive (_error_) ->  _error_
     {321, 0}, // 18: _directive ->  <empty>
     {323, 2}, // 19: _directive_line ('\x0a') ->  _directive '\x0a'
     {310, 2}, // 20: opt_directives ->  opt_directives _directive_line
     {310, 0}, // 21: opt_directives ->  <empty>
     {324, 1}, // 22: _baseclassheader (BASECLASSHEADER) ->  BASECLASSHEADER
     {325, 1}, // 23: _classheader (CLASSHEADER) ->  CLASSHEADER
     {326, 1}, // 24: _classname (CLASSNAME) ->  CLASSNAME
     {327, 1}, // 25: _filenames (FILENAMES) ->  FILENAMES
     {328, 1}, // 26: _implementationheader (IMPLEMENTATIONHEADER) ->  IMPLEMENTATIONHEADER
     {329, 1}, // 27: _inputinterface (INPUTINTERFACE) ->  INPUTINTERFACE
     {330, 1}, // 28: _inputimplementation (INPUTIMPLEMENTATION) ->  INPUTIMPLEMENTATION
     {331, 1}, // 29: _lexfunctionname (LEXFUNCTIONNAME) ->  LEXFUNCTIONNAME
     {332, 1}, // 30: _lexsource (LEXSOURCE) ->  LEXSOURCE
     {333, 1}, // 31: _namespace (NAMESPACE) ->  NAMESPACE
     {334, 1}, // 32: _skeleton_directory (SKELETON_DIRECTORY) ->  SKELETON_DIRECTORY
     {335, 1}, // 33: _target_directory (TARGET_DIRECTORY) ->  TARGET_DIRECTORY
     {336, 1}, // 34: _stringOrIdent (STRING) ->  STRING
     {336, 1}, // 35: _stringOrIdent (IDENTIFIER) ->  IDENTIFIER
     {336, 1}, // 36: _stringOrIdent (RAWSTRING) ->  RAWSTRING
     {337, 0}, // 37: _opt_is ->  <empty>
     {337, 1}, // 38: _opt_is ('=') ->  '='
     {322, 3}, // 39: option ->  _inputinterface _opt_is _stringOrIdent
     {322, 3}, // 40: option ->  _inputimplementation _opt_is _stringOrIdent
     {322, 3}, // 41: option ->  _classname _opt_is _stringOrIdent
     {322, 3}, // 42: option ->  _filenames _opt_is _stringOrIdent
     {322, 3}, // 43: option ->  _lexfunctionname _opt_is _stringOrIdent
     {322, 3}, // 44: option ->  _baseclassheader _opt_is _stringOrIdent
     {322, 3}, // 45: option ->  _classheader _opt_is _stringOrIdent
     {322, 3}, // 46: option ->  _implementationheader _opt_is _stringOrIdent
     {322, 3}, // 47: option ->  _lexsource _opt_is _stringOrIdent
     {322, 3}, // 48: option ->  _skeleton_directory _opt_is _stringOrIdent
     {322, 3}, // 49: option ->  _target_directory _opt_is _stringOrIdent
     {322, 3}, // 50: option ->  _namespace _opt_is _stringOrIdent
     {322, 1}, // 51: option (CASEINSENSITIVE) ->  CASEINSENSITIVE
     {322, 1}, // 52: option (INTERACTIVE) ->  INTERACTIVE
     {322, 1}, // 53: option (PRINT) ->  PRINT
     {322, 1}, // 54: option (NOLINES) ->  NOLINES
     {322, 1}, // 55: option (DEBUG) ->  DEBUG
     {338, 1}, // 56: combi_chars (',') ->  ','
     {338, 1}, // 57: combi_chars ('=') ->  '='
     {338, 1}, // 58: combi_chars ('-') ->  '-'
     {338, 1}, // 59: combi_chars (''') ->  '''
     {339, 1}, // 60: _ms_name ->  identifier
     {340, 3}, // 61: _ms_name_list (',') ->  _ms_name_list ',' _ms_name
     {340, 1}, // 62: _ms_name_list ->  _ms_name
     {341, 1}, // 63: _ms_specs ('*') ->  '*'
     {341, 1}, // 64: _ms_specs ->  _ms_name_list
     {342, 1}, // 65: _ms_angular ('<') ->  '<'
     {343, 3}, // 66: ms_spec ('>') ->  _ms_angular _ms_specs '>'
     {344, 0}, // 67: _m_contents ->  <empty>
     {345, 2}, // 68: _cc_start (CC_START) ->  CC_START _m_contents
     {346, 2}, // 69: _cc_negated (CC_NEGATED) ->  CC_NEGATED _m_contents
     {347, 1}, // 70: _cc_end (']') ->  ']'
     {348, 1}, // 71: _cc_literal ('/') ->  '/'
     {348, 1}, // 72: _cc_literal ('|') ->  '|'
     {348, 1}, // 73: _cc_literal ('(') ->  '('
     {348, 1}, // 74: _cc_literal (')') ->  ')'
     {348, 1}, // 75: _cc_literal ('*') ->  '*'
     {348, 1}, // 76: _cc_literal ('+') ->  '+'
     {348, 1}, // 77: _cc_literal ('?') ->  '?'
     {348, 1}, // 78: _cc_literal ('{') ->  '{'
     {348, 1}, // 79: _cc_literal ('}') ->  '}'
     {348, 1}, // 80: _cc_literal ('<') ->  '<'
     {348, 1}, // 81: _cc_literal ('>') ->  '>'
     {348, 1}, // 82: _cc_literal ('[') ->  '['
     {348, 1}, // 83: _cc_literal ('.') ->  '.'
     {348, 1}, // 84: _cc_literal ('^') ->  '^'
     {348, 1}, // 85: _cc_literal ('$') ->  '$'
     {348, 1}, // 86: _cc_literal (DOLLAR) ->  DOLLAR
     {348, 1}, // 87: _cc_literal (DECIMAL) ->  DECIMAL
     {348, 1}, // 88: _cc_literal (IDENTIFIER) ->  IDENTIFIER
     {348, 1}, // 89: _cc_literal (CHAR) ->  CHAR
     {348, 1}, // 90: _cc_literal (STRING) ->  STRING
     {348, 1}, // 91: _cc_literal ->  combi_chars
     {349, 1}, // 92: _cc_escape (ESCAPE_SEQUENCE) ->  ESCAPE_SEQUENCE
     {349, 1}, // 93: _cc_escape (QUOTES) ->  QUOTES
     {350, 1}, // 94: _cc_element ->  _cc_escape
     {350, 1}, // 95: _cc_element (PREDEFINED_CLASS) ->  PREDEFINED_CLASS
     {350, 1}, // 96: _cc_element ->  _cc_literal
     {351, 2}, // 97: _cc_contents ->  _cc_contents _cc_element
     {351, 1}, // 98: _cc_contents ->  _cc_element
     {352, 2}, // 99: _cc_set ->  _cc_start _cc_end
     {352, 2}, // 100: _cc_set ->  _cc_negated _cc_end
     {352, 3}, // 101: _cc_set ->  _cc_start _cc_contents _cc_end
     {352, 3}, // 102: _cc_set ->  _cc_negated _cc_contents _cc_end
     {353, 3}, // 103: characterclass (CC_PLUS) ->  characterclass CC_PLUS characterclass
     {353, 3}, // 104: characterclass (CC_MINUS) ->  characterclass CC_MINUS characterclass
     {353, 1}, // 105: characterclass ->  _cc_set
     {354, 1}, // 106: _decimal (DECIMAL) ->  DECIMAL
     {355, 1}, // 107: _interval ->  _decimal
     {355, 3}, // 108: _interval (',') ->  _decimal ',' _decimal
     {355, 2}, // 109: _interval (',') ->  _decimal ','
     {356, 1}, // 110: _single_char (CHAR) ->  CHAR
     {356, 1}, // 111: _single_char ->  combi_chars
     {357, 1}, // 112: _open_paren ('(') ->  '('
     {358, 1}, // 113: _close_paren (')') ->  ')'
     {359, 1}, // 114: _open_curly ('{') ->  '{'
     {360, 1}, // 115: _unit ('^') ->  '^'
     {360, 1}, // 116: _unit ('$') ->  '$'
     {360, 1}, // 117: _unit (DOLLAR) ->  DOLLAR
     {360, 1}, // 118: _unit (STRING) ->  STRING
     {360, 1}, // 119: _unit (RAWSTRING) ->  RAWSTRING
     {360, 1}, // 120: _unit (QUOTES) ->  QUOTES
     {360, 1}, // 121: _unit (ESCAPE_SEQUENCE) ->  ESCAPE_SEQUENCE
     {360, 1}, // 122: _unit ('.') ->  '.'
     {360, 1}, // 123: _unit ->  _single_char
     {360, 1}, // 124: _unit ->  characterclass
     {361, 1}, // 125: _quantifier ('*') ->  '*'
     {361, 1}, // 126: _quantifier ('+') ->  '+'
     {361, 1}, // 127: _quantifier ('?') ->  '?'
     {362, 1}, // 128: _regex ->  _unit
     {362, 4}, // 129: _regex ('}') ->  _regex _open_curly _interval '}'
     {362, 2}, // 130: _regex ->  _regex _quantifier
     {362, 3}, // 131: _regex ->  _open_paren _regex _close_paren
     {362, 2}, // 132: _regex (CHAR) ->  _regex _regex
     {362, 3}, // 133: _regex ('|') ->  _regex '|' _regex
     {362, 3}, // 134: _regex ('/') ->  _regex '/' _regex
     {363, 1}, // 135: regexOrEOF ->  _regex
     {363, 1}, // 136: regexOrEOF (EOF_PATTERN) ->  EOF_PATTERN
     {364, 1}, // 137: action (BLOCK) ->  BLOCK
     {365, 0}, // 138: reset ->  <empty>
     {366, 5}, // 139: _msCompound_regex_list (ORNL) ->  _msCompound_regex_list ORNL '\x0a' reset _msCompound_regex_list
     {366, 1}, // 140: _msCompound_regex_list ->  regexOrEOF
     {367, 0}, // 141: _msCompound_rule ->  <empty>
     {367, 1}, // 142: _msCompound_rule ->  _msCompound_regex_list
     {367, 2}, // 143: _msCompound_rule ->  _msCompound_regex_list action
     {368, 3}, // 144: _msCompound_nl_rule ('\x0a') ->  _msCompound_rule '\x0a' reset
     {369, 0}, // 145: _opt_msCompound_nl_rules ->  <empty>
     {369, 2}, // 146: _opt_msCompound_nl_rules ->  _opt_msCompound_nl_rules _msCompound_nl_rule
     {370, 5}, // 147: msCompound ('{') ->  ms_spec '{' reset _opt_msCompound_nl_rules '}'
     {371, 3}, // 148: _optMs_regex ->  ms_spec reset regexOrEOF
     {371, 1}, // 149: _optMs_regex ->  regexOrEOF
     {372, 5}, // 150: _optMs_rule (ORNL) ->  _optMs_rule ORNL '\x0a' reset _optMs_rule
     {372, 1}, // 151: _optMs_rule ->  _optMs_regex
     {373, 1}, // 152: optMs_rule ->  _optMs_rule
     {373, 2}, // 153: optMs_rule ->  _optMs_rule action
     {374, 0}, // 154: _rule_def ->  <empty>
     {374, 1}, // 155: _rule_def (_error_) ->  _error_
     {374, 1}, // 156: _rule_def ->  optMs_rule
     {374, 1}, // 157: _rule_def ->  msCompound
     {375, 3}, // 158: _rule ('\x0a') ->  _rule_def '\x0a' reset
     {312, 2}, // 159: rules ->  rules _rule
     {312, 0}, // 160: rules ->  <empty>
     {376, 1}, // 161: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {   3} },                  
    { {     309}, {   1} }, // input         
    { {     310}, {   2} }, // opt_directives
    { {       0}, { -21} },                  
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { ERR_REQ_DEF}, {  44} },                              
    { {         311}, {   3} }, // section_delimiter         
    { {         323}, {   4} }, // _directive_line           
    { {         259}, {   5} }, // SECTION_DELIMITER         
    { {         321}, {   6} }, // _directive                
    { {         322}, {   7} }, // option                    
    { {         317}, {   8} }, // _start_condition_directive
    { {         320}, {   9} }, // _name_definition          
    { {     _error_}, {  10} }, // _error_                   
    { {         329}, {  11} }, // _inputinterface           
    { {         330}, {  12} }, // _inputimplementation      
    { {         326}, {  13} }, // _classname                
    { {         327}, {  14} }, // _filenames                
    { {         331}, {  15} }, // _lexfunctionname          
    { {         324}, {  16} }, // _baseclassheader          
    { {         325}, {  17} }, // _classheader              
    { {         328}, {  18} }, // _implementationheader     
    { {         332}, {  19} }, // _lexsource                
    { {         334}, {  20} }, // _skeleton_directory       
    { {         335}, {  21} }, // _target_directory         
    { {         333}, {  22} }, // _namespace                
    { {         261}, {  23} }, // CASEINSENSITIVE           
    { {         269}, {  24} }, // INTERACTIVE               
    { {         274}, {  25} }, // PRINT                     
    { {         273}, {  26} }, // NOLINES                   
    { {         264}, {  27} }, // DEBUG                     
    { {         315}, {  28} }, // _start_condition_type     
    { {         318}, {  29} }, // _name_def                 
    { {         268}, {  30} }, // INPUTINTERFACE            
    { {         267}, {  31} }, // INPUTIMPLEMENTATION       
    { {         263}, {  32} }, // CLASSNAME                 
    { {         265}, {  33} }, // FILENAMES                 
    { {         270}, {  34} }, // LEXFUNCTIONNAME           
    { {         260}, {  35} }, // BASECLASSHEADER           
    { {         262}, {  36} }, // CLASSHEADER               
    { {         266}, {  37} }, // IMPLEMENTATIONHEADER      
    { {         271}, {  38} }, // LEXSOURCE                 
    { {         275}, {  39} }, // SKELETON_DIRECTORY        
    { {         276}, {  40} }, // TARGET_DIRECTORY          
    { {         272}, {  41} }, // NAMESPACE                 
    { {         258}, {  42} }, // INCL_START_CONDITION      
    { {         257}, {  43} }, // EXCL_START_CONDITION      
    { {         313}, {  44} }, // identifier                
    { {         278}, {  45} }, // IDENTIFIER                
    { {           0}, { -18} },                              
};

SR__ s_3[] =
{
    { { DEF_RED}, {    2} },         
    { {     312}, {   46} }, // rules
    { {       0}, { -160} },         
};

SR__ s_4[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 47} }, // '\x0a'
    { {         0}, {  0} },          
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 48} }, // '\x0a'
    { {         0}, {  0} },          
};

SR__ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_11[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  49} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_12[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  51} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_13[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  52} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_14[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  53} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_15[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  54} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_16[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  55} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_17[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  56} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_18[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  57} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_19[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  58} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_20[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  59} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_21[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  60} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_22[] =
{
    { { REQ_DEF}, {   3} },           
    { {     337}, {  61} }, // _opt_is
    { {      61}, {  50} }, // '='    
    { {       0}, { -37} },           
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  4} },                          
    { {       316}, { 62} }, // _start_condition_names
    { {       313}, { 63} }, // identifier            
    { {       278}, { 45} }, // IDENTIFIER            
    { {         0}, {  0} },                          
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  4} },               
    { {       319}, { 64} }, // _stringType
    { {       281}, { 65} }, // STRING     
    { {       280}, { 66} }, // RAWSTRING  
    { {         0}, {  0} },               
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {  2} },            
    { {     314}, { 67} }, // _sc_name
    { {       0}, { -4} },            
};

SR__ s_43[] =
{
    { { DEF_RED}, {  2} },            
    { {     314}, { 68} }, // _sc_name
    { {       0}, { -4} },            
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_46[] =
{
    { { ERR_REQ_DEF}, {   39} },                   
    { {         375}, {   69} }, // _rule          
    { {         374}, {   70} }, // _rule_def      
    { {     _error_}, {   71} }, // _error_        
    { {         373}, {   72} }, // optMs_rule     
    { {         370}, {   73} }, // msCompound     
    { {         372}, {   74} }, // _optMs_rule    
    { {         343}, {   75} }, // ms_spec        
    { {         371}, {   76} }, // _optMs_regex   
    { {         342}, {   77} }, // _ms_angular    
    { {         363}, {   78} }, // regexOrEOF     
    { {          60}, {   79} }, // '<'            
    { {         362}, {   80} }, // _regex         
    { {         279}, {   81} }, // EOF_PATTERN    
    { {         360}, {   82} }, // _unit          
    { {         357}, {   83} }, // _open_paren    
    { {          94}, {   84} }, // '^'            
    { {          36}, {   85} }, // '$'            
    { {         284}, {   86} }, // DOLLAR         
    { {         281}, {   87} }, // STRING         
    { {         280}, {   88} }, // RAWSTRING      
    { {         282}, {   89} }, // QUOTES         
    { {         285}, {   90} }, // ESCAPE_SEQUENCE
    { {          46}, {   91} }, // '.'            
    { {         356}, {   92} }, // _single_char   
    { {         353}, {   93} }, // characterclass 
    { {          40}, {   94} }, // '('            
    { {         290}, {   95} }, // CHAR           
    { {         338}, {   96} }, // combi_chars    
    { {         352}, {   97} }, // _cc_set        
    { {          44}, {   98} }, // ','            
    { {          61}, {   99} }, // '='            
    { {          45}, {  100} }, // '-'            
    { {          39}, {  101} }, // '''            
    { {         345}, {  102} }, // _cc_start      
    { {         346}, {  103} }, // _cc_negated    
    { {         286}, {  104} }, // CC_START       
    { {         287}, {  105} }, // CC_NEGATED     
    { {       _EOF_}, {   -1} }, // _EOF_          
    { {           0}, { -154} },                   
};

SR__ s_47[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 106} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 110} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 111} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 112} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 113} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 114} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 115} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 116} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 117} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 118} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 119} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       336}, { 120} }, // _stringOrIdent
    { {       281}, { 107} }, // STRING        
    { {       278}, { 108} }, // IDENTIFIER    
    { {       280}, { 109} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR__ s_62[] =
{
    { { REQ_DEF}, {   3} },              
    { {     313}, { 121} }, // identifier
    { {     278}, {  45} }, // IDENTIFIER
    { {       0}, {  -9} },              
};

SR__ s_63[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -159} }, 
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 122} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_71[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -155} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -156} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -157} }, 
};

SR__ s_74[] =
{
    { { REQ_DEF}, {    4} },          
    { {     364}, {  123} }, // action
    { {     289}, {  124} }, // ORNL  
    { {     277}, {  125} }, // BLOCK 
    { {       0}, { -152} },          
};

SR__ s_75[] =
{
    { { REQ_DEF}, {    3} },         
    { {     123}, {  126} }, // '{'  
    { {     365}, {  127} }, // reset
    { {       0}, { -138} },         
};

SR__ s_76[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -151} }, 
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {   7} },                 
    { {       341}, { 128} }, // _ms_specs    
    { {        42}, { 129} }, // '*'          
    { {       340}, { 130} }, // _ms_name_list
    { {       339}, { 131} }, // _ms_name     
    { {       313}, { 132} }, // identifier   
    { {       278}, {  45} }, // IDENTIFIER   
    { {         0}, {   0} },                 
};

SR__ s_78[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -149} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   34} },                   
    { {     359}, {  133} }, // _open_curly    
    { {     361}, {  134} }, // _quantifier    
    { {     362}, {  135} }, // _regex         
    { {     124}, {  136} }, // '|'            
    { {      47}, {  137} }, // '/'            
    { {     123}, {  138} }, // '{'            
    { {      42}, {  139} }, // '*'            
    { {      43}, {  140} }, // '+'            
    { {      63}, {  141} }, // '?'            
    { {     360}, {   82} }, // _unit          
    { {     357}, {   83} }, // _open_paren    
    { {      94}, {   84} }, // '^'            
    { {      36}, {   85} }, // '$'            
    { {     284}, {   86} }, // DOLLAR         
    { {     281}, {   87} }, // STRING         
    { {     280}, {   88} }, // RAWSTRING      
    { {     282}, {   89} }, // QUOTES         
    { {     285}, {   90} }, // ESCAPE_SEQUENCE
    { {      46}, {   91} }, // '.'            
    { {     356}, {   92} }, // _single_char   
    { {     353}, {   93} }, // characterclass 
    { {      40}, {   94} }, // '('            
    { {     290}, {   95} }, // CHAR           
    { {     338}, {   96} }, // combi_chars    
    { {     352}, {   97} }, // _cc_set        
    { {      44}, {   98} }, // ','            
    { {      61}, {   99} }, // '='            
    { {      45}, {  100} }, // '-'            
    { {      39}, {  101} }, // '''            
    { {     345}, {  102} }, // _cc_start      
    { {     346}, {  103} }, // _cc_negated    
    { {     286}, {  104} }, // CC_START       
    { {     287}, {  105} }, // CC_NEGATED     
    { {       0}, { -135} },                   
};

SR__ s_81[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -136} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  26} },                   
    { {       362}, { 142} }, // _regex         
    { {       360}, {  82} }, // _unit          
    { {       357}, {  83} }, // _open_paren    
    { {        94}, {  84} }, // '^'            
    { {        36}, {  85} }, // '$'            
    { {       284}, {  86} }, // DOLLAR         
    { {       281}, {  87} }, // STRING         
    { {       280}, {  88} }, // RAWSTRING      
    { {       282}, {  89} }, // QUOTES         
    { {       285}, {  90} }, // ESCAPE_SEQUENCE
    { {        46}, {  91} }, // '.'            
    { {       356}, {  92} }, // _single_char   
    { {       353}, {  93} }, // characterclass 
    { {        40}, {  94} }, // '('            
    { {       290}, {  95} }, // CHAR           
    { {       338}, {  96} }, // combi_chars    
    { {       352}, {  97} }, // _cc_set        
    { {        44}, {  98} }, // ','            
    { {        61}, {  99} }, // '='            
    { {        45}, { 100} }, // '-'            
    { {        39}, { 101} }, // '''            
    { {       345}, { 102} }, // _cc_start      
    { {       346}, { 103} }, // _cc_negated    
    { {       286}, { 104} }, // CC_START       
    { {       287}, { 105} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR__ s_84[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_86[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_87[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_88[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR__ s_89[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_91[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -122} }, 
};

SR__ s_92[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR__ s_93[] =
{
    { { REQ_DEF}, {    3} },            
    { {     291}, {  143} }, // CC_PLUS 
    { {     292}, {  144} }, // CC_MINUS
    { {       0}, { -124} },            
};

SR__ s_94[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  35} },                    
    { {       347}, { 145} }, // _cc_end         
    { {       351}, { 146} }, // _cc_contents    
    { {        93}, { 147} }, // ']'             
    { {       350}, { 148} }, // _cc_element     
    { {       349}, { 149} }, // _cc_escape      
    { {       288}, { 150} }, // PREDEFINED_CLASS
    { {       348}, { 151} }, // _cc_literal     
    { {       285}, { 152} }, // ESCAPE_SEQUENCE 
    { {       282}, { 153} }, // QUOTES          
    { {        47}, { 154} }, // '/'             
    { {       124}, { 155} }, // '|'             
    { {        40}, { 156} }, // '('             
    { {        41}, { 157} }, // ')'             
    { {        42}, { 158} }, // '*'             
    { {        43}, { 159} }, // '+'             
    { {        63}, { 160} }, // '?'             
    { {       123}, { 161} }, // '{'             
    { {       125}, { 162} }, // '}'             
    { {        60}, { 163} }, // '<'             
    { {        62}, { 164} }, // '>'             
    { {        91}, { 165} }, // '['             
    { {        46}, { 166} }, // '.'             
    { {        94}, { 167} }, // '^'             
    { {        36}, { 168} }, // '$'             
    { {       284}, { 169} }, // DOLLAR          
    { {       283}, { 170} }, // DECIMAL         
    { {       278}, { 171} }, // IDENTIFIER      
    { {       290}, { 172} }, // CHAR            
    { {       281}, { 173} }, // STRING          
    { {       338}, { 174} }, // combi_chars     
    { {        44}, {  98} }, // ','             
    { {        61}, {  99} }, // '='             
    { {        45}, { 100} }, // '-'             
    { {        39}, { 101} }, // '''             
    { {         0}, {   0} },                    
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  35} },                    
    { {       347}, { 175} }, // _cc_end         
    { {       351}, { 176} }, // _cc_contents    
    { {        93}, { 147} }, // ']'             
    { {       350}, { 148} }, // _cc_element     
    { {       349}, { 149} }, // _cc_escape      
    { {       288}, { 150} }, // PREDEFINED_CLASS
    { {       348}, { 151} }, // _cc_literal     
    { {       285}, { 152} }, // ESCAPE_SEQUENCE 
    { {       282}, { 153} }, // QUOTES          
    { {        47}, { 154} }, // '/'             
    { {       124}, { 155} }, // '|'             
    { {        40}, { 156} }, // '('             
    { {        41}, { 157} }, // ')'             
    { {        42}, { 158} }, // '*'             
    { {        43}, { 159} }, // '+'             
    { {        63}, { 160} }, // '?'             
    { {       123}, { 161} }, // '{'             
    { {       125}, { 162} }, // '}'             
    { {        60}, { 163} }, // '<'             
    { {        62}, { 164} }, // '>'             
    { {        91}, { 165} }, // '['             
    { {        46}, { 166} }, // '.'             
    { {        94}, { 167} }, // '^'             
    { {        36}, { 168} }, // '$'             
    { {       284}, { 169} }, // DOLLAR          
    { {       283}, { 170} }, // DECIMAL         
    { {       278}, { 171} }, // IDENTIFIER      
    { {       290}, { 172} }, // CHAR            
    { {       281}, { 173} }, // STRING          
    { {       338}, { 174} }, // combi_chars     
    { {        44}, {  98} }, // ','             
    { {        61}, {  99} }, // '='             
    { {        45}, { 100} }, // '-'             
    { {        39}, { 101} }, // '''             
    { {         0}, {   0} },                    
};

SR__ s_104[] =
{
    { { DEF_RED}, {   2} },               
    { {     344}, { 177} }, // _m_contents
    { {       0}, { -67} },               
};

SR__ s_105[] =
{
    { { DEF_RED}, {   2} },               
    { {     344}, { 178} }, // _m_contents
    { {       0}, { -67} },               
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_121[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_122[] =
{
    { { DEF_RED}, {    2} },         
    { {     365}, {  179} }, // reset
    { {       0}, { -138} },         
};

SR__ s_123[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -153} }, 
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 180} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_125[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -137} }, 
};

SR__ s_126[] =
{
    { { DEF_RED}, {    2} },         
    { {     365}, {  181} }, // reset
    { {       0}, { -138} },         
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {  28} },                   
    { {       363}, { 182} }, // regexOrEOF     
    { {       362}, {  80} }, // _regex         
    { {       279}, {  81} }, // EOF_PATTERN    
    { {       360}, {  82} }, // _unit          
    { {       357}, {  83} }, // _open_paren    
    { {        94}, {  84} }, // '^'            
    { {        36}, {  85} }, // '$'            
    { {       284}, {  86} }, // DOLLAR         
    { {       281}, {  87} }, // STRING         
    { {       280}, {  88} }, // RAWSTRING      
    { {       282}, {  89} }, // QUOTES         
    { {       285}, {  90} }, // ESCAPE_SEQUENCE
    { {        46}, {  91} }, // '.'            
    { {       356}, {  92} }, // _single_char   
    { {       353}, {  93} }, // characterclass 
    { {        40}, {  94} }, // '('            
    { {       290}, {  95} }, // CHAR           
    { {       338}, {  96} }, // combi_chars    
    { {       352}, {  97} }, // _cc_set        
    { {        44}, {  98} }, // ','            
    { {        61}, {  99} }, // '='            
    { {        45}, { 100} }, // '-'            
    { {        39}, { 101} }, // '''            
    { {       345}, { 102} }, // _cc_start      
    { {       346}, { 103} }, // _cc_negated    
    { {       286}, { 104} }, // CC_START       
    { {       287}, { 105} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        62}, { 183} }, // '>'
    { {         0}, {   0} },       
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_130[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 184} }, // ','
    { {       0}, { -64} },       
};

SR__ s_131[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {       355}, { 185} }, // _interval
    { {       354}, { 186} }, // _decimal 
    { {       283}, { 187} }, // DECIMAL  
    { {         0}, {   0} },             
};

SR__ s_134[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR__ s_135[] =
{
    { { REQ_DEF}, {   16} },                  
    { {     359}, {  133} }, // _open_curly   
    { {     361}, {  134} }, // _quantifier   
    { {     362}, {  135} }, // _regex        
    { {     123}, {  138} }, // '{'           
    { {      42}, {  139} }, // '*'           
    { {      43}, {  140} }, // '+'           
    { {      63}, {  141} }, // '?'           
    { {     360}, {   82} }, // _unit         
    { {     357}, {   83} }, // _open_paren   
    { {     356}, {   92} }, // _single_char  
    { {     353}, {   93} }, // characterclass
    { {     338}, {   96} }, // combi_chars   
    { {     352}, {   97} }, // _cc_set       
    { {     345}, {  102} }, // _cc_start     
    { {     346}, {  103} }, // _cc_negated   
    { {       0}, { -132} },                  
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {  26} },                   
    { {       362}, { 188} }, // _regex         
    { {       360}, {  82} }, // _unit          
    { {       357}, {  83} }, // _open_paren    
    { {        94}, {  84} }, // '^'            
    { {        36}, {  85} }, // '$'            
    { {       284}, {  86} }, // DOLLAR         
    { {       281}, {  87} }, // STRING         
    { {       280}, {  88} }, // RAWSTRING      
    { {       282}, {  89} }, // QUOTES         
    { {       285}, {  90} }, // ESCAPE_SEQUENCE
    { {        46}, {  91} }, // '.'            
    { {       356}, {  92} }, // _single_char   
    { {       353}, {  93} }, // characterclass 
    { {        40}, {  94} }, // '('            
    { {       290}, {  95} }, // CHAR           
    { {       338}, {  96} }, // combi_chars    
    { {       352}, {  97} }, // _cc_set        
    { {        44}, {  98} }, // ','            
    { {        61}, {  99} }, // '='            
    { {        45}, { 100} }, // '-'            
    { {        39}, { 101} }, // '''            
    { {       345}, { 102} }, // _cc_start      
    { {       346}, { 103} }, // _cc_negated    
    { {       286}, { 104} }, // CC_START       
    { {       287}, { 105} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {  26} },                   
    { {       362}, { 189} }, // _regex         
    { {       360}, {  82} }, // _unit          
    { {       357}, {  83} }, // _open_paren    
    { {        94}, {  84} }, // '^'            
    { {        36}, {  85} }, // '$'            
    { {       284}, {  86} }, // DOLLAR         
    { {       281}, {  87} }, // STRING         
    { {       280}, {  88} }, // RAWSTRING      
    { {       282}, {  89} }, // QUOTES         
    { {       285}, {  90} }, // ESCAPE_SEQUENCE
    { {        46}, {  91} }, // '.'            
    { {       356}, {  92} }, // _single_char   
    { {       353}, {  93} }, // characterclass 
    { {        40}, {  94} }, // '('            
    { {       290}, {  95} }, // CHAR           
    { {       338}, {  96} }, // combi_chars    
    { {       352}, {  97} }, // _cc_set        
    { {        44}, {  98} }, // ','            
    { {        61}, {  99} }, // '='            
    { {        45}, { 100} }, // '-'            
    { {        39}, { 101} }, // '''            
    { {       345}, { 102} }, // _cc_start      
    { {       346}, { 103} }, // _cc_negated    
    { {       286}, { 104} }, // CC_START       
    { {       287}, { 105} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR__ s_138[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR__ s_140[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -126} }, 
};

SR__ s_141[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {  36} },                   
    { {       358}, { 190} }, // _close_paren   
    { {       359}, { 133} }, // _open_curly    
    { {       361}, { 134} }, // _quantifier    
    { {       362}, { 135} }, // _regex         
    { {       124}, { 136} }, // '|'            
    { {        47}, { 137} }, // '/'            
    { {        41}, { 191} }, // ')'            
    { {       123}, { 138} }, // '{'            
    { {        42}, { 139} }, // '*'            
    { {        43}, { 140} }, // '+'            
    { {        63}, { 141} }, // '?'            
    { {       360}, {  82} }, // _unit          
    { {       357}, {  83} }, // _open_paren    
    { {        94}, {  84} }, // '^'            
    { {        36}, {  85} }, // '$'            
    { {       284}, {  86} }, // DOLLAR         
    { {       281}, {  87} }, // STRING         
    { {       280}, {  88} }, // RAWSTRING      
    { {       282}, {  89} }, // QUOTES         
    { {       285}, {  90} }, // ESCAPE_SEQUENCE
    { {        46}, {  91} }, // '.'            
    { {       356}, {  92} }, // _single_char   
    { {       353}, {  93} }, // characterclass 
    { {        40}, {  94} }, // '('            
    { {       290}, {  95} }, // CHAR           
    { {       338}, {  96} }, // combi_chars    
    { {       352}, {  97} }, // _cc_set        
    { {        44}, {  98} }, // ','            
    { {        61}, {  99} }, // '='            
    { {        45}, { 100} }, // '-'            
    { {        39}, { 101} }, // '''            
    { {       345}, { 102} }, // _cc_start      
    { {       346}, { 103} }, // _cc_negated    
    { {       286}, { 104} }, // CC_START       
    { {       287}, { 105} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR__ s_143[] =
{
    { { REQ_TOKEN}, {   7} },                  
    { {       353}, { 192} }, // characterclass
    { {       352}, {  97} }, // _cc_set       
    { {       345}, { 102} }, // _cc_start     
    { {       346}, { 103} }, // _cc_negated   
    { {       286}, { 104} }, // CC_START      
    { {       287}, { 105} }, // CC_NEGATED    
    { {         0}, {   0} },                  
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {   7} },                  
    { {       353}, { 193} }, // characterclass
    { {       352}, {  97} }, // _cc_set       
    { {       345}, { 102} }, // _cc_start     
    { {       346}, { 103} }, // _cc_negated   
    { {       286}, { 104} }, // CC_START      
    { {       287}, { 105} }, // CC_NEGATED    
    { {         0}, {   0} },                  
};

SR__ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {  34} },                    
    { {       347}, { 194} }, // _cc_end         
    { {       350}, { 195} }, // _cc_element     
    { {        93}, { 147} }, // ']'             
    { {       349}, { 149} }, // _cc_escape      
    { {       288}, { 150} }, // PREDEFINED_CLASS
    { {       348}, { 151} }, // _cc_literal     
    { {       285}, { 152} }, // ESCAPE_SEQUENCE 
    { {       282}, { 153} }, // QUOTES          
    { {        47}, { 154} }, // '/'             
    { {       124}, { 155} }, // '|'             
    { {        40}, { 156} }, // '('             
    { {        41}, { 157} }, // ')'             
    { {        42}, { 158} }, // '*'             
    { {        43}, { 159} }, // '+'             
    { {        63}, { 160} }, // '?'             
    { {       123}, { 161} }, // '{'             
    { {       125}, { 162} }, // '}'             
    { {        60}, { 163} }, // '<'             
    { {        62}, { 164} }, // '>'             
    { {        91}, { 165} }, // '['             
    { {        46}, { 166} }, // '.'             
    { {        94}, { 167} }, // '^'             
    { {        36}, { 168} }, // '$'             
    { {       284}, { 169} }, // DOLLAR          
    { {       283}, { 170} }, // DECIMAL         
    { {       278}, { 171} }, // IDENTIFIER      
    { {       290}, { 172} }, // CHAR            
    { {       281}, { 173} }, // STRING          
    { {       338}, { 174} }, // combi_chars     
    { {        44}, {  98} }, // ','             
    { {        61}, {  99} }, // '='             
    { {        45}, { 100} }, // '-'             
    { {        39}, { 101} }, // '''             
    { {         0}, {   0} },                    
};

SR__ s_147[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_152[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_153[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_158[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_160[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_161[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_162[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_164[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_165[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_166[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_167[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_168[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_169[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_170[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_171[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_172[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_173[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_174[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_175[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_176[] =
{
    { { REQ_TOKEN}, {  34} },                    
    { {       347}, { 196} }, // _cc_end         
    { {       350}, { 195} }, // _cc_element     
    { {        93}, { 147} }, // ']'             
    { {       349}, { 149} }, // _cc_escape      
    { {       288}, { 150} }, // PREDEFINED_CLASS
    { {       348}, { 151} }, // _cc_literal     
    { {       285}, { 152} }, // ESCAPE_SEQUENCE 
    { {       282}, { 153} }, // QUOTES          
    { {        47}, { 154} }, // '/'             
    { {       124}, { 155} }, // '|'             
    { {        40}, { 156} }, // '('             
    { {        41}, { 157} }, // ')'             
    { {        42}, { 158} }, // '*'             
    { {        43}, { 159} }, // '+'             
    { {        63}, { 160} }, // '?'             
    { {       123}, { 161} }, // '{'             
    { {       125}, { 162} }, // '}'             
    { {        60}, { 163} }, // '<'             
    { {        62}, { 164} }, // '>'             
    { {        91}, { 165} }, // '['             
    { {        46}, { 166} }, // '.'             
    { {        94}, { 167} }, // '^'             
    { {        36}, { 168} }, // '$'             
    { {       284}, { 169} }, // DOLLAR          
    { {       283}, { 170} }, // DECIMAL         
    { {       278}, { 171} }, // IDENTIFIER      
    { {       290}, { 172} }, // CHAR            
    { {       281}, { 173} }, // STRING          
    { {       338}, { 174} }, // combi_chars     
    { {        44}, {  98} }, // ','             
    { {        61}, {  99} }, // '='             
    { {        45}, { 100} }, // '-'             
    { {        39}, { 101} }, // '''             
    { {         0}, {   0} },                    
};

SR__ s_177[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_178[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_179[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -158} }, 
};

SR__ s_180[] =
{
    { { DEF_RED}, {    2} },         
    { {     365}, {  197} }, // reset
    { {       0}, { -138} },         
};

SR__ s_181[] =
{
    { { DEF_RED}, {    2} },                            
    { {     369}, {  198} }, // _opt_msCompound_nl_rules
    { {       0}, { -145} },                            
};

SR__ s_182[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -148} }, 
};

SR__ s_183[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_184[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       339}, { 199} }, // _ms_name  
    { {       313}, { 132} }, // identifier
    { {       278}, {  45} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_185[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 200} }, // '}'
    { {         0}, {   0} },       
};

SR__ s_186[] =
{
    { { REQ_DEF}, {    2} },       
    { {      44}, {  201} }, // ','
    { {       0}, { -107} },       
};

SR__ s_187[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_188[] =
{
    { { REQ_DEF}, {   17} },                  
    { {     359}, {  133} }, // _open_curly   
    { {     361}, {  134} }, // _quantifier   
    { {     362}, {  135} }, // _regex        
    { {     123}, {  138} }, // '{'           
    { {      42}, {  139} }, // '*'           
    { {      43}, {  140} }, // '+'           
    { {      63}, {  141} }, // '?'           
    { {     360}, {   82} }, // _unit         
    { {     357}, {   83} }, // _open_paren   
    { {     356}, {   92} }, // _single_char  
    { {     353}, {   93} }, // characterclass
    { {     290}, {   95} }, // CHAR          
    { {     338}, {   96} }, // combi_chars   
    { {     352}, {   97} }, // _cc_set       
    { {     345}, {  102} }, // _cc_start     
    { {     346}, {  103} }, // _cc_negated   
    { {       0}, { -133} },                  
};

SR__ s_189[] =
{
    { { REQ_DEF}, {   18} },                  
    { {     359}, {  133} }, // _open_curly   
    { {     361}, {  134} }, // _quantifier   
    { {     362}, {  135} }, // _regex        
    { {     124}, {  136} }, // '|'           
    { {     123}, {  138} }, // '{'           
    { {      42}, {  139} }, // '*'           
    { {      43}, {  140} }, // '+'           
    { {      63}, {  141} }, // '?'           
    { {     360}, {   82} }, // _unit         
    { {     357}, {   83} }, // _open_paren   
    { {     356}, {   92} }, // _single_char  
    { {     353}, {   93} }, // characterclass
    { {     290}, {   95} }, // CHAR          
    { {     338}, {   96} }, // combi_chars   
    { {     352}, {   97} }, // _cc_set       
    { {     345}, {  102} }, // _cc_start     
    { {     346}, {  103} }, // _cc_negated   
    { {       0}, { -134} },                  
};

SR__ s_190[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_191[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_192[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_193[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_194[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR__ s_195[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR__ s_196[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR__ s_197[] =
{
    { { REQ_TOKEN}, {  33} },                   
    { {       372}, { 202} }, // _optMs_rule    
    { {       371}, {  76} }, // _optMs_regex   
    { {       343}, { 203} }, // ms_spec        
    { {       363}, {  78} }, // regexOrEOF     
    { {       342}, {  77} }, // _ms_angular    
    { {       362}, {  80} }, // _regex         
    { {       279}, {  81} }, // EOF_PATTERN    
    { {        60}, {  79} }, // '<'            
    { {       360}, {  82} }, // _unit          
    { {       357}, {  83} }, // _open_paren    
    { {        94}, {  84} }, // '^'            
    { {        36}, {  85} }, // '$'            
    { {       284}, {  86} }, // DOLLAR         
    { {       281}, {  87} }, // STRING         
    { {       280}, {  88} }, // RAWSTRING      
    { {       282}, {  89} }, // QUOTES         
    { {       285}, {  90} }, // ESCAPE_SEQUENCE
    { {        46}, {  91} }, // '.'            
    { {       356}, {  92} }, // _single_char   
    { {       353}, {  93} }, // characterclass 
    { {        40}, {  94} }, // '('            
    { {       290}, {  95} }, // CHAR           
    { {       338}, {  96} }, // combi_chars    
    { {       352}, {  97} }, // _cc_set        
    { {        44}, {  98} }, // ','            
    { {        61}, {  99} }, // '='            
    { {        45}, { 100} }, // '-'            
    { {        39}, { 101} }, // '''            
    { {       345}, { 102} }, // _cc_start      
    { {       346}, { 103} }, // _cc_negated    
    { {       286}, { 104} }, // CC_START       
    { {       287}, { 105} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR__ s_198[] =
{
    { { REQ_DEF}, {   32} },                          
    { {     125}, {  204} }, // '}'                   
    { {     368}, {  205} }, // _msCompound_nl_rule   
    { {     367}, {  206} }, // _msCompound_rule      
    { {     366}, {  207} }, // _msCompound_regex_list
    { {     363}, {  208} }, // regexOrEOF            
    { {     362}, {   80} }, // _regex                
    { {     279}, {   81} }, // EOF_PATTERN           
    { {     360}, {   82} }, // _unit                 
    { {     357}, {   83} }, // _open_paren           
    { {      94}, {   84} }, // '^'                   
    { {      36}, {   85} }, // '$'                   
    { {     284}, {   86} }, // DOLLAR                
    { {     281}, {   87} }, // STRING                
    { {     280}, {   88} }, // RAWSTRING             
    { {     282}, {   89} }, // QUOTES                
    { {     285}, {   90} }, // ESCAPE_SEQUENCE       
    { {      46}, {   91} }, // '.'                   
    { {     356}, {   92} }, // _single_char          
    { {     353}, {   93} }, // characterclass        
    { {      40}, {   94} }, // '('                   
    { {     290}, {   95} }, // CHAR                  
    { {     338}, {   96} }, // combi_chars           
    { {     352}, {   97} }, // _cc_set               
    { {      44}, {   98} }, // ','                   
    { {      61}, {   99} }, // '='                   
    { {      45}, {  100} }, // '-'                   
    { {      39}, {  101} }, // '''                   
    { {     345}, {  102} }, // _cc_start             
    { {     346}, {  103} }, // _cc_negated           
    { {     286}, {  104} }, // CC_START              
    { {     287}, {  105} }, // CC_NEGATED            
    { {       0}, { -141} },                          
};

SR__ s_199[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_200[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_201[] =
{
    { { REQ_DEF}, {    3} },            
    { {     354}, {  209} }, // _decimal
    { {     283}, {  187} }, // DECIMAL 
    { {       0}, { -109} },            
};

SR__ s_202[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -150} }, 
};

SR__ s_203[] =
{
    { { DEF_RED}, {    2} },         
    { {     365}, {  127} }, // reset
    { {       0}, { -138} },         
};

SR__ s_204[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -147} }, 
};

SR__ s_205[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -146} }, 
};

SR__ s_206[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 210} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_207[] =
{
    { { REQ_DEF}, {    4} },          
    { {     364}, {  211} }, // action
    { {     289}, {  212} }, // ORNL  
    { {     277}, {  125} }, // BLOCK 
    { {       0}, { -142} },          
};

SR__ s_208[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR__ s_209[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_210[] =
{
    { { DEF_RED}, {    2} },         
    { {     365}, {  213} }, // reset
    { {       0}, { -138} },         
};

SR__ s_211[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR__ s_212[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 214} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_213[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -144} }, 
};

SR__ s_214[] =
{
    { { DEF_RED}, {    2} },         
    { {     365}, {  215} }, // reset
    { {       0}, { -138} },         
};

SR__ s_215[] =
{
    { { REQ_TOKEN}, {  29} },                          
    { {       366}, { 216} }, // _msCompound_regex_list
    { {       363}, { 208} }, // regexOrEOF            
    { {       362}, {  80} }, // _regex                
    { {       279}, {  81} }, // EOF_PATTERN           
    { {       360}, {  82} }, // _unit                 
    { {       357}, {  83} }, // _open_paren           
    { {        94}, {  84} }, // '^'                   
    { {        36}, {  85} }, // '$'                   
    { {       284}, {  86} }, // DOLLAR                
    { {       281}, {  87} }, // STRING                
    { {       280}, {  88} }, // RAWSTRING             
    { {       282}, {  89} }, // QUOTES                
    { {       285}, {  90} }, // ESCAPE_SEQUENCE       
    { {        46}, {  91} }, // '.'                   
    { {       356}, {  92} }, // _single_char          
    { {       353}, {  93} }, // characterclass        
    { {        40}, {  94} }, // '('                   
    { {       290}, {  95} }, // CHAR                  
    { {       338}, {  96} }, // combi_chars           
    { {       352}, {  97} }, // _cc_set               
    { {        44}, {  98} }, // ','                   
    { {        61}, {  99} }, // '='                   
    { {        45}, { 100} }, // '-'                   
    { {        39}, { 101} }, // '''                   
    { {       345}, { 102} }, // _cc_start             
    { {       346}, { 103} }, // _cc_negated           
    { {       286}, { 104} }, // CC_START              
    { {       287}, { 105} }, // CC_NEGATED            
    { {         0}, {   0} },                          
};

SR__ s_216[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -139} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,
};

typedef std::unordered_map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "_UNDETERMINED_"),  // predefined symbols
    SMapVal(-1, "_EOF_"),
    SMapVal(256, "_error_"),

    SMapVal(257, "EXCL_START_CONDITION"),
    SMapVal(258, "INCL_START_CONDITION"),
    SMapVal(259, "SECTION_DELIMITER"),
    SMapVal(260, "BASECLASSHEADER"),
    SMapVal(261, "CASEINSENSITIVE"),
    SMapVal(262, "CLASSHEADER"),
    SMapVal(263, "CLASSNAME"),
    SMapVal(264, "DEBUG"),
    SMapVal(265, "FILENAMES"),
    SMapVal(266, "IMPLEMENTATIONHEADER"),
    SMapVal(267, "INPUTIMPLEMENTATION"),
    SMapVal(268, "INPUTINTERFACE"),
    SMapVal(269, "INTERACTIVE"),
    SMapVal(270, "LEXFUNCTIONNAME"),
    SMapVal(271, "LEXSOURCE"),
    SMapVal(272, "NAMESPACE"),
    SMapVal(273, "NOLINES"),
    SMapVal(274, "PRINT"),
    SMapVal(275, "SKELETON_DIRECTORY"),
    SMapVal(276, "TARGET_DIRECTORY"),
    SMapVal(277, "BLOCK"),
    SMapVal(278, "IDENTIFIER"),
    SMapVal(279, "EOF_PATTERN"),
    SMapVal(280, "RAWSTRING"),
    SMapVal(281, "STRING"),
    SMapVal(282, "QUOTES"),
    SMapVal(283, "DECIMAL"),
    SMapVal(284, "DOLLAR"),
    SMapVal(285, "ESCAPE_SEQUENCE"),
    SMapVal(286, "CC_START"),
    SMapVal(287, "CC_NEGATED"),
    SMapVal(288, "PREDEFINED_CLASS"),
    SMapVal(289, "ORNL"),
    SMapVal(290, "CHAR"),
    SMapVal(291, "CC_PLUS"),
    SMapVal(292, "CC_MINUS"),
    SMapVal(309, "input"),
    SMapVal(310, "opt_directives"),
    SMapVal(311, "section_delimiter"),
    SMapVal(312, "rules"),
    SMapVal(313, "identifier"),
    SMapVal(314, "_sc_name"),
    SMapVal(315, "_start_condition_type"),
    SMapVal(316, "_start_condition_names"),
    SMapVal(317, "_start_condition_directive"),
    SMapVal(318, "_name_def"),
    SMapVal(319, "_stringType"),
    SMapVal(320, "_name_definition"),
    SMapVal(321, "_directive"),
    SMapVal(322, "option"),
    SMapVal(323, "_directive_line"),
    SMapVal(324, "_baseclassheader"),
    SMapVal(325, "_classheader"),
    SMapVal(326, "_classname"),
    SMapVal(327, "_filenames"),
    SMapVal(328, "_implementationheader"),
    SMapVal(329, "_inputinterface"),
    SMapVal(330, "_inputimplementation"),
    SMapVal(331, "_lexfunctionname"),
    SMapVal(332, "_lexsource"),
    SMapVal(333, "_namespace"),
    SMapVal(334, "_skeleton_directory"),
    SMapVal(335, "_target_directory"),
    SMapVal(336, "_stringOrIdent"),
    SMapVal(337, "_opt_is"),
    SMapVal(338, "combi_chars"),
    SMapVal(339, "_ms_name"),
    SMapVal(340, "_ms_name_list"),
    SMapVal(341, "_ms_specs"),
    SMapVal(342, "_ms_angular"),
    SMapVal(343, "ms_spec"),
    SMapVal(344, "_m_contents"),
    SMapVal(345, "_cc_start"),
    SMapVal(346, "_cc_negated"),
    SMapVal(347, "_cc_end"),
    SMapVal(348, "_cc_literal"),
    SMapVal(349, "_cc_escape"),
    SMapVal(350, "_cc_element"),
    SMapVal(351, "_cc_contents"),
    SMapVal(352, "_cc_set"),
    SMapVal(353, "characterclass"),
    SMapVal(354, "_decimal"),
    SMapVal(355, "_interval"),
    SMapVal(356, "_single_char"),
    SMapVal(357, "_open_paren"),
    SMapVal(358, "_close_paren"),
    SMapVal(359, "_open_curly"),
    SMapVal(360, "_unit"),
    SMapVal(361, "_quantifier"),
    SMapVal(362, "_regex"),
    SMapVal(363, "regexOrEOF"),
    SMapVal(364, "action"),
    SMapVal(365, "reset"),
    SMapVal(366, "_msCompound_regex_list"),
    SMapVal(367, "_msCompound_rule"),
    SMapVal(368, "_msCompound_nl_rule"),
    SMapVal(369, "_opt_msCompound_nl_rules"),
    SMapVal(370, "msCompound"),
    SMapVal(371, "_optMs_regex"),
    SMapVal(372, "_optMs_rule"),
    SMapVal(373, "optMs_rule"),
    SMapVal(374, "_rule_def"),
    SMapVal(375, "_rule"),
    SMapVal(376, "input_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(true),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}

// $insert debugfunctions

std::ostringstream ParserBase::s_out__;

std::ostream &ParserBase::dflush__(std::ostream &out)
{
    std::ostringstream &s_out__ = dynamic_cast<std::ostringstream &>(out);

    std::cout << "    " << s_out__.str() << std::flush;
    s_out__.clear();
    s_out__.str("");
    return out;
}

std::string ParserBase::stype__(char const *pre, STYPE__ const &semVal, char const *post) const
{
    return "";
}
std::string ParserBase::symbol__(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << "`" << it->second << "'";
    else if (isprint(value))
        ostr << "`" << static_cast<char>(value) << "' (" << value << ")";
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << "'";
    return ostr.str();
}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert debug
    if (d_debug__)
        s_out__ <<   "push(state " << state << stype__(", semantic TOS = ", d_val__, ")") << ')' << "\n" << dflush__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "pop(" << count << ") from stack having size " << (d_stackIdx__ + 1) << "\n" << dflush__;
    if (d_stackIdx__ < static_cast<int>(count))
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "Terminating parse(): unrecoverable input error at token " << symbol__(d_token__) << "\n" << dflush__;
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert debug
    if (d_debug__)
        s_out__ <<  "pop(): next state: " << d_state__ << ", token: " << symbol__(d_token__) ;
    // $insert debug
    if (d_debug__)
        s_out__ <<  stype__("semantic: ", d_val__) << "\n" << dflush__;
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    // $insert debug
    if (d_debug__)
        s_out__ <<  "executeAction(): of rule " << production ;
    // $insert debug
    if (d_debug__)
        s_out__ <<   stype__(", semantic [TOS]: ", d_val__) << " ..." << "\n" << dflush__;
    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 88 "grammar"
        {
         d_nLOPstartConditions = d_rules.startConditions().size();
         d_rules.setEndUserSC();
         reset();
         }
        break;

        case 3:
#line 97 "grammar"
        {
         d_val__.get<Tag__::STRING>() = d_matched;
         }
        break;

        case 4:
#line 2 "inc/directives"
        {
         d_expect = "list of start condition names";
         }
        break;

        case 5:
#line 10 "inc/directives"
        {
         d_rules.setType(StartConditions::INCLUSIVE);
         }
        break;

        case 6:
#line 16 "inc/directives"
        {
         d_rules.setType(StartConditions::EXCLUSIVE);
         }
        break;

        case 7:
#line 23 "inc/directives"
        {
         d_rules.defineStartCondition(d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 8:
#line 28 "inc/directives"
        {
         d_rules.defineStartCondition(d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 10:
#line 40 "inc/directives"
        {
         d_scanner.newDefinition(); 
         }
        break;

        case 11:
#line 47 "inc/directives"
        {
         d_val__.get<Tag__::TEXTTYPE>() = TextType::STRING;
         }
        break;

        case 12:
#line 52 "inc/directives"
        {
         d_val__.get<Tag__::TEXTTYPE>() = rawString();
         }
        break;

        case 13:
#line 59 "inc/directives"
        {
         d_scanner.addDefinition(d_vsp__[-1].data<Tag__::STRING>(), d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 22:
#line 3 "inc/options"
        {
         d_expect = "scanner base class header file name";
         }
        break;

        case 23:
#line 10 "inc/options"
        {
         d_expect = "scanner class header file name";
         }
        break;

        case 24:
#line 17 "inc/options"
        {
         d_expect = "class name";
         }
        break;

        case 25:
#line 24 "inc/options"
        {
         d_expect = "generic filenames specification";
         }
        break;

        case 26:
#line 31 "inc/options"
        {
         d_expect = "implementation header file name";
         }
        break;

        case 27:
#line 38 "inc/options"
        {
         d_expect = "name of the file holding Input's interface";
         }
        break;

        case 28:
#line 45 "inc/options"
        {
         d_expect = "name of the file holding Input's implementations";
         }
        break;

        case 29:
#line 52 "inc/options"
        {
         d_expect = "name of the lex() function";
         }
        break;

        case 30:
#line 59 "inc/options"
        {
         d_expect = "source file name of the lex function";
         }
        break;

        case 31:
#line 66 "inc/options"
        {
         d_expect = "name of the namespace to use";
         }
        break;

        case 32:
#line 73 "inc/options"
        {
         d_expect = "directory name of the flexc++ skeleton files";
         }
        break;

        case 33:
#line 80 "inc/options"
        {
         d_expect = "target directory name for generated files";
         }
        break;

        case 34:
#line 87 "inc/options"
        {
         d_val__.get<Tag__::TEXTTYPE>() = TextType::STRING;
         }
        break;

        case 35:
#line 92 "inc/options"
        {
         d_val__.get<Tag__::TEXTTYPE>() = TextType::IDENT;
         }
        break;

        case 36:
#line 97 "inc/options"
        {
         d_val__.get<Tag__::TEXTTYPE>() = rawString();
         }
        break;

        case 39:
#line 110 "inc/options"
        {
         d_options.setInputInterfacePath(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 40:
#line 115 "inc/options"
        {
         d_options.setInputImplementationPath(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 41:
#line 120 "inc/options"
        {
         d_options.setClassName(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 42:
#line 125 "inc/options"
        {
         d_options.setFilenames(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 43:
#line 130 "inc/options"
        {
         d_options.setLexFunctionName(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 44:
#line 135 "inc/options"
        {
         d_options.setBaseClassHeader(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 45:
#line 140 "inc/options"
        {
         d_options.setClassHeader(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 46:
#line 145 "inc/options"
        {
         d_options.setImplementationHeader(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 47:
#line 150 "inc/options"
        {
         d_options.setLexSource(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 48:
#line 155 "inc/options"
        {
         d_options.setSkeletonDirectory(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 49:
#line 160 "inc/options"
        {
         d_options.setTargetDirectory(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 50:
#line 165 "inc/options"
        {
         d_options.setNameSpace(d_vsp__[0].data<Tag__::TEXTTYPE>());
         }
        break;

        case 51:
#line 170 "inc/options"
        {
         d_options.setCaseInsensitive();
         }
        break;

        case 52:
#line 175 "inc/options"
        {
         d_options.setInteractive();
         }
        break;

        case 53:
#line 180 "inc/options"
        {
         d_options.setPrint();
         }
        break;

        case 54:
#line 185 "inc/options"
        {
         d_options.setLines(false);
         }
        break;

        case 55:
#line 190 "inc/options"
        {
         d_options.setDebug();
         }
        break;

        case 60:
#line 3 "inc/msspec"
        {
         d_rules.addStartCondition(d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 63:
#line 16 "inc/msspec"
        { 
         d_rules.useAll();
         }
        break;

        case 65:
#line 25 "inc/msspec"
        {
         d_scanner.acceptMulti();
         d_scanner.forceCaseSensitive();
         }
        break;

        case 66:
#line 33 "inc/msspec"
        {
         d_scanner.ignoreWS();
         d_scanner.multiAsChar();
         }
        break;

        case 67:
#line 2 "inc/characterclass"
        {
         d_expect = "character class";
         }
        break;

        case 68:
#line 10 "inc/characterclass"
        {
         d_val__.get<Tag__::CHARCLASS>() = CharClass(d_matched, 1); 
         }
        break;

        case 69:
#line 18 "inc/characterclass"
        { 
         d_val__.get<Tag__::CHARCLASS>() = CharClass(d_matched, 2); 
         }
        break;

        case 70:
#line 25 "inc/characterclass"
        {
         d_expect = "pattern or action block";
         }
        break;

        case 94:
#line 83 "inc/characterclass"
        {
         d_val__.get<Tag__::STRING>() = CharClass::chars(d_matched);
         }
        break;

        case 95:
#line 88 "inc/characterclass"
        {
         d_val__.get<Tag__::STRING>() = CharClass::predefined(d_matched);
         }
        break;

        case 96:
#line 93 "inc/characterclass"
        {
         d_val__.get<Tag__::STRING>() = CharClass::chars(d_matched);
         }
        break;

        case 97:
#line 100 "inc/characterclass"
        {
         d_vsp__[-1].data<Tag__::VECTOR>().push_back(d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 98:
#line 105 "inc/characterclass"
        {
         d_val__.get<Tag__::VECTOR>() = vector<string>(1, d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 100:
#line 114 "inc/characterclass"
        {
         d_vsp__[-1].data<Tag__::CHARCLASS>().negate();
         }
        break;

        case 101:
#line 119 "inc/characterclass"
        {
         d_vsp__[-2].data<Tag__::CHARCLASS>().append(d_vsp__[-1].data<Tag__::VECTOR>());
         }
        break;

        case 102:
#line 124 "inc/characterclass"
        {
         d_vsp__[-2].data<Tag__::CHARCLASS>().negate(d_vsp__[-1].data<Tag__::VECTOR>());
         }
        break;

        case 103:
#line 131 "inc/characterclass"
        {
         d_val__.get<Tag__::CHARCLASS>() = CharClass::unite(d_vsp__[-2].data<Tag__::CHARCLASS>(), d_vsp__[0].data<Tag__::CHARCLASS>());
         }
        break;

        case 104:
#line 136 "inc/characterclass"
        {
         d_val__.get<Tag__::CHARCLASS>() = CharClass::difference(d_vsp__[-2].data<Tag__::CHARCLASS>(), d_vsp__[0].data<Tag__::CHARCLASS>());
         }
        break;

        case 106:
#line 3 "inc/regexoreof"
        {
         d_val__.get<Tag__::STRING>() = d_matched;
         }
        break;

        case 107:
#line 10 "inc/regexoreof"
        {
         d_val__.get<Tag__::INTERVAL>() = Interval::exact(d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 108:
#line 15 "inc/regexoreof"
        {
         d_val__.get<Tag__::INTERVAL>() = Interval::range(d_vsp__[-2].data<Tag__::STRING>(), d_vsp__[0].data<Tag__::STRING>());
         }
        break;

        case 109:
#line 20 "inc/regexoreof"
        {
         d_val__.get<Tag__::INTERVAL>() = Interval::lowerBound(d_vsp__[-1].data<Tag__::STRING>());
         }
        break;

        case 112:
#line 33 "inc/regexoreof"
        {
         ++d_parentheses;
         }
        break;

        case 113:
#line 40 "inc/regexoreof"
        {
         --d_parentheses;
         }
        break;

        case 114:
#line 47 "inc/regexoreof"
        {
         d_scanner.acceptMulti();
         }
        break;

        case 115:
#line 54 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = boln();
         }
        break;

        case 116:
#line 59 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = dollar();
         }
        break;

        case 117:
#line 64 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = eolnDollar();
         }
        break;

        case 118:
#line 69 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = str();
         }
        break;

        case 119:
#line 74 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = rawText(d_scanner.rawStringContents());
         }
        break;

        case 120:
#line 79 "inc/regexoreof"
        { 
         d_val__.get<Tag__::PATTERN>() = quotes();
         }
        break;

        case 121:
#line 84 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = escape();
         }
        break;

        case 122:
#line 89 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = Pattern::dot(d_states);
         }
        break;

        case 123:
#line 94 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = rawText();
         }
        break;

        case 124:
#line 99 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = Pattern::characterClass(d_states, d_vsp__[0].data<Tag__::CHARCLASS>());
         }
        break;

        case 128:
#line 119 "inc/regexoreof"
        {
         Options::regexCall("unit");
         }
        break;

        case 129:
#line 124 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = interval(d_vsp__[-3].data<Tag__::PATTERN>(), d_vsp__[-1].data<Tag__::INTERVAL>());
         }
        break;

        case 130:
#line 129 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = Pattern::quantifier(d_states, d_vsp__[-1].data<Tag__::PATTERN>(), d_matched[0]);
         }
        break;

        case 131:
#line 134 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = d_vsp__[-1].data<Tag__::PATTERN>();
         }
        break;

        case 132:
#line 139 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = Pattern::concatenate(d_states, d_vsp__[-1].data<Tag__::PATTERN>(), d_vsp__[0].data<Tag__::PATTERN>());
         }
        break;

        case 133:
#line 144 "inc/regexoreof"
        { 
         d_val__.get<Tag__::PATTERN>() = Pattern::alternatives(d_states, d_vsp__[-2].data<Tag__::PATTERN>(), d_vsp__[0].data<Tag__::PATTERN>());
         }
        break;

        case 134:
#line 149 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = lookahead(d_vsp__[-2].data<Tag__::PATTERN>(), d_vsp__[0].data<Tag__::PATTERN>());
         }
        break;

        case 136:
#line 158 "inc/regexoreof"
        {
         d_val__.get<Tag__::PATTERN>() = Pattern::eof(d_states);
         }
        break;

        case 137:
#line 6 "inc/action"
        {
         block(); 
         }
        break;

        case 138:
#line 2 "inc/reset"
        {
         reset();
         }
        break;

        case 139:
#line 5 "inc/mscompound"
        {
         orAction();
         }
        break;

        case 140:
#line 10 "inc/mscompound"
        {
         addRule(d_vsp__[0].data<Tag__::PATTERN>());
         }
        break;

        case 142:
#line 21 "inc/mscompound"
        {
         noActions();
         }
        break;

        case 143:
#line 26 "inc/mscompound"
        {
         assignBlock();
         }
        break;

        case 147:
#line 43 "inc/mscompound"
        { 
         d_rules.resetStartConditions();
         }
        break;

        case 148:
#line 4 "inc/optmsrule"
        {
         d_val__.get<Tag__::PATTERN>() = d_vsp__[0].data<Tag__::PATTERN>();
         }
        break;

        case 150:
#line 20 "inc/optmsrule"
        {
         orAction();
         }
        break;

        case 151:
#line 25 "inc/optmsrule"
        {
         addRule(d_vsp__[0].data<Tag__::PATTERN>(), true); 
         }
        break;

        case 153:
#line 37 "inc/optmsrule"
        {
         assignBlock();
         }
        break;

    }
    // $insert debug
    if (d_debug__)
        s_out__ <<  "... action of rule " << production << " completed" ;
    // $insert debug
    if (d_debug__)
        s_out__ <<   stype__(", semantic: ", d_val__) << "\n" << dflush__;
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

    // $insert debug
    if (d_debug__)
        s_out__ <<  "reduce(): by rule " << (&pi - s_productionInfo) ;
    // $insert debug
    if (d_debug__)
        s_out__ <<  " to N-terminal " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
        // $insert debug
        if (d_debug__)
            s_out__ <<  "nextToken(): popped " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
    // $insert debug
    if (d_debug__)
        s_out__ <<  "nextToken(): using " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__) ;
        // $insert debug
        if (d_debug__)
            s_out__ <<  "): default reduction by rule " << -elementPtr->d_action << "\n" << dflush__;
            return elementPtr->d_action;                
        }
        // $insert debug
        if (d_debug__)
            s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__) << "): Not " ;
        // $insert debug
        if (d_debug__)
            s_out__ <<  "found. " << (recovery ? "Continue" : "Start") << " error recovery."  << "\n" << dflush__;

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;

// $insert debuglookup
    if (d_debug__)
    {
        s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__);

        if (action < 0)             // a reduction is found
            s_out__ << "): reduce by rule " << -action;
        else if (action == 0)
            s_out__ <<  "): ACCEPT";
        else 
            s_out__ <<  "): shift " << action << " (" << symbol__(d_token__) << 
                        " processed)";

        s_out__ << "\n" << dflush__;
    }

    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }

    // $insert debug
    if (d_debug__)
        s_out__ <<  "errorRecovery(): " << d_nErrors__ << " error(s) so far. State = " << top__() << "\n" << dflush__;

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "errorRecovery(): pop state " << top__() << "\n" << dflush__;
        pop__();
    }
    // $insert debug
    if (d_debug__)
        s_out__ <<  "errorRecovery(): state " << top__() << " is an ERROR state" << "\n" << dflush__;

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();
                // $insert debug
                if (d_debug__)
                    s_out__ <<  "errorRecovery() SHIFT state " << action ;
                // $insert debug
                if (d_debug__)
                    s_out__ <<  ", continue with " << symbol__(d_token__) << "\n" << dflush__;

                if (gotToken)
                {
                    // $insert debug
                    if (d_debug__)
                        s_out__ <<  "errorRecovery() COMPLETED: next state " ;
                    // $insert debug
                    if (d_debug__)
                        s_out__ <<  action << ", no token yet" << "\n" << dflush__;

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
                // $insert debug
                if (d_debug__)
                    s_out__ <<  "errorRecovery() REDUCE by rule " << -action ;
                // $insert debug
                if (d_debug__)
                    s_out__ <<  ", token = " << symbol__(d_token__) << "\n" << dflush__;
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "parse(): Parsing starts" << "\n" << dflush__;
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "==" << "\n" << dflush__;
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "parse(): returns " << retValue << "\n" << dflush__;
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}




