Flc() uses regular expressions to generically descibe textual patterns.  Often
a flc() specification file uses multiple `sub-languages' having specialized
tasks. A sub-language to describe the normal structure of the input, a
sub-language to describe comment, a sub-language to describe strings, etc.,
etc.

For flexible handling of these sub-languages flc(), like flex, offers em(start
conditions), a.k.a. em(mini scanners). A start condition can be declared in
the definition section of the lexer file:
    verb(
%x  string
%%
...
    ) 
    A tt(%x) is used to declare em(exclusive start conditions). Following
tt(%x) a list (no commas) of start condition names is expected. Rules
specified for exclusive start conditions only apply to that particular mini
scanner. It is also possible to define em(inclusive start condition) using
tt(%s). Rules not explicitly associated with a start condition (or with the
(default) start condition tt(StartCondition__::INITIAL) also apply to
inclusive start conditions.

A start condition is used in the rules section of the lexical scanner
specification file as indicated in section ref(patterns). Here is a concrete
example:
    verb(
%x string
%%

\"              {
                    more();
                    begin(StartCondition__::string);
                }

<string>{
    \"          {
                    begin(StartCondition__::INITIAL);
                    return Token::STRING;
                }
    \\.|.       more();
}
    )
    This tells flc() that the double quote starts (begins) the
tt(StartCondition__::string) start condition. The tt(string) start condition's
rules then define what happens to double quoted strings. All its characters
are collected, and eventually the string's content is returned by
tt(matched()).

By default, scanners generated by flc() start in the
tt(StartCondition__::INITIAL) start condition. When encountering a double
quote, the scanner switches to the tt(StartCondition__::string) mini
scanner. Now, only the rules that are defined for the tt(string) start
condition are active. Once flc() encounters an unescaped double quote, it
switches back to the tt(StartCondition__::INITIAL) start condition and returns
tt(Token::STRING) to its called, indicating that it has seen a bf(C) string.
